// Copyright 2024 The Kubernetes Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: api/services/external/v1/external_exporter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExternalExporter_ExportProblems_FullMethodName = "/npd.external.v1.ExternalExporter/ExportProblems"
	ExternalExporter_GetMetadata_FullMethodName    = "/npd.external.v1.ExternalExporter/GetMetadata"
	ExternalExporter_Stop_FullMethodName           = "/npd.external.v1.ExternalExporter/Stop"
)

// ExternalExporterClient is the client API for ExternalExporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ExternalExporter service defines the gRPC interface for external exporter plugins.
// External exporters run as separate processes and receive status updates from NPD.
type ExternalExporterClient interface {
	// ExportProblems receives status updates from monitors and exports them.
	// This is called whenever any monitor reports a status change.
	ExportProblems(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
	// GetMetadata returns information about the exporter's capabilities and version.
	// Called once during plugin initialization.
	GetMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExporterMetadata, error)
	// Stop notifies the exporter to perform graceful shutdown.
	// Called when NPD is shutting down or plugin is being disabled.
	Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type externalExporterClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalExporterClient(cc grpc.ClientConnInterface) ExternalExporterClient {
	return &externalExporterClient{cc}
}

func (c *externalExporterClient) ExportProblems(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, ExternalExporter_ExportProblems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExporterClient) GetMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExporterMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExporterMetadata)
	err := c.cc.Invoke(ctx, ExternalExporter_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExporterClient) Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExternalExporter_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalExporterServer is the server API for ExternalExporter service.
// All implementations must embed UnimplementedExternalExporterServer
// for forward compatibility.
//
// ExternalExporter service defines the gRPC interface for external exporter plugins.
// External exporters run as separate processes and receive status updates from NPD.
type ExternalExporterServer interface {
	// ExportProblems receives status updates from monitors and exports them.
	// This is called whenever any monitor reports a status change.
	ExportProblems(context.Context, *ExportRequest) (*ExportResponse, error)
	// GetMetadata returns information about the exporter's capabilities and version.
	// Called once during plugin initialization.
	GetMetadata(context.Context, *emptypb.Empty) (*ExporterMetadata, error)
	// Stop notifies the exporter to perform graceful shutdown.
	// Called when NPD is shutting down or plugin is being disabled.
	Stop(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedExternalExporterServer()
}

// UnimplementedExternalExporterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalExporterServer struct{}

func (UnimplementedExternalExporterServer) ExportProblems(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportProblems not implemented")
}
func (UnimplementedExternalExporterServer) GetMetadata(context.Context, *emptypb.Empty) (*ExporterMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedExternalExporterServer) Stop(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedExternalExporterServer) mustEmbedUnimplementedExternalExporterServer() {}
func (UnimplementedExternalExporterServer) testEmbeddedByValue()                          {}

// UnsafeExternalExporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalExporterServer will
// result in compilation errors.
type UnsafeExternalExporterServer interface {
	mustEmbedUnimplementedExternalExporterServer()
}

func RegisterExternalExporterServer(s grpc.ServiceRegistrar, srv ExternalExporterServer) {
	// If the following call pancis, it indicates UnimplementedExternalExporterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExternalExporter_ServiceDesc, srv)
}

func _ExternalExporter_ExportProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExporterServer).ExportProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalExporter_ExportProblems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExporterServer).ExportProblems(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExporter_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExporterServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalExporter_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExporterServer).GetMetadata(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExporter_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExporterServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalExporter_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExporterServer).Stop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalExporter_ServiceDesc is the grpc.ServiceDesc for ExternalExporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalExporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "npd.external.v1.ExternalExporter",
	HandlerType: (*ExternalExporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportProblems",
			Handler:    _ExternalExporter_ExportProblems_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _ExternalExporter_GetMetadata_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ExternalExporter_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/external/v1/external_exporter.proto",
}
