// Copyright 2024 The Kubernetes Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: api/services/external/v1/external_monitor.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExternalMonitor_CheckHealth_FullMethodName = "/npd.external.v1.ExternalMonitor/CheckHealth"
	ExternalMonitor_GetMetadata_FullMethodName = "/npd.external.v1.ExternalMonitor/GetMetadata"
	ExternalMonitor_Stop_FullMethodName        = "/npd.external.v1.ExternalMonitor/Stop"
)

// ExternalMonitorClient is the client API for ExternalMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ExternalMonitor service defines the gRPC interface for external monitor plugins.
// External monitors run as separate processes and communicate with NPD via Unix sockets.
type ExternalMonitorClient interface {
	// CheckHealth is called periodically by NPD to check the health status.
	// This is the primary method for problem detection.
	CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Status, error)
	// GetMetadata returns information about the monitor's capabilities and version.
	// Called once during plugin initialization.
	GetMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MonitorMetadata, error)
	// Stop notifies the monitor to perform graceful shutdown.
	// Called when NPD is shutting down or plugin is being disabled.
	Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type externalMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalMonitorClient(cc grpc.ClientConnInterface) ExternalMonitorClient {
	return &externalMonitorClient{cc}
}

func (c *externalMonitorClient) CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, ExternalMonitor_CheckHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalMonitorClient) GetMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MonitorMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonitorMetadata)
	err := c.cc.Invoke(ctx, ExternalMonitor_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalMonitorClient) Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExternalMonitor_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalMonitorServer is the server API for ExternalMonitor service.
// All implementations must embed UnimplementedExternalMonitorServer
// for forward compatibility.
//
// ExternalMonitor service defines the gRPC interface for external monitor plugins.
// External monitors run as separate processes and communicate with NPD via Unix sockets.
type ExternalMonitorServer interface {
	// CheckHealth is called periodically by NPD to check the health status.
	// This is the primary method for problem detection.
	CheckHealth(context.Context, *HealthCheckRequest) (*Status, error)
	// GetMetadata returns information about the monitor's capabilities and version.
	// Called once during plugin initialization.
	GetMetadata(context.Context, *emptypb.Empty) (*MonitorMetadata, error)
	// Stop notifies the monitor to perform graceful shutdown.
	// Called when NPD is shutting down or plugin is being disabled.
	Stop(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedExternalMonitorServer()
}

// UnimplementedExternalMonitorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalMonitorServer struct{}

func (UnimplementedExternalMonitorServer) CheckHealth(context.Context, *HealthCheckRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedExternalMonitorServer) GetMetadata(context.Context, *emptypb.Empty) (*MonitorMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedExternalMonitorServer) Stop(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedExternalMonitorServer) mustEmbedUnimplementedExternalMonitorServer() {}
func (UnimplementedExternalMonitorServer) testEmbeddedByValue()                         {}

// UnsafeExternalMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalMonitorServer will
// result in compilation errors.
type UnsafeExternalMonitorServer interface {
	mustEmbedUnimplementedExternalMonitorServer()
}

func RegisterExternalMonitorServer(s grpc.ServiceRegistrar, srv ExternalMonitorServer) {
	// If the following call pancis, it indicates UnimplementedExternalMonitorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExternalMonitor_ServiceDesc, srv)
}

func _ExternalMonitor_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalMonitorServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalMonitor_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalMonitorServer).CheckHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalMonitor_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalMonitorServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalMonitor_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalMonitorServer).GetMetadata(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalMonitor_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalMonitorServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalMonitor_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalMonitorServer).Stop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalMonitor_ServiceDesc is the grpc.ServiceDesc for ExternalMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "npd.external.v1.ExternalMonitor",
	HandlerType: (*ExternalMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _ExternalMonitor_CheckHealth_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _ExternalMonitor_GetMetadata_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ExternalMonitor_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/external/v1/external_monitor.proto",
}
